{"mappings":"AAAA,0BAA0B;AAC1B,2CAA2C;AAC3C,yCAAyC;AAEzC,yBAAyB;AACzB,6CAA6C;AAC7C,qBAAqB;AACrB,eAAe;AACf,IAAI;AAEJ,WAAW;AACX,2BAA2B;AAC3B,8BAA8B;AAC9B,IAAI;AAEJ,oCAAoC;AACpC,+CAA+C;AAC/C,oCAAoC;AAEpC,SAAS;AACT,MAAM,cAAc,IAAI,QAAQ,CAAC,SAAQ;IACrC,QAAQ,GAAG,CAAC;IACZ,WAAW;QACP,IAAG,KAAK,MAAM,KAAK,KACf,QAAQ;aAER,OAAO;IAEf,GAAG;AACP;AAEA,WACI,8BAA8B;CAC7B,IAAI,CAAC,CAAC;IACH,QAAQ,GAAG,CAAC,CAAC,EAAE,KAAK,kEAAU,CAAC;AACnC,EACA,8BAA8B;CAC7B,KAAK,CAAC,CAAC;IACJ,QAAQ,KAAK,CAAC;AAClB","sources":["비동기.js"],"sourcesContent":["// // 콜백 함수를 사용하여 비동기 처리하기\r\n// function orderCoffee(coffee, callback) {\r\n//     console.log(`${coffee}를 만드는 중...`)\r\n\r\n//     setTimeout(() => {\r\n//         console.log(`${coffee}가 만들어졌습니다.`)\r\n//         callback()\r\n//     }, 3000)\r\n// }\r\n\r\n// // 콜백 함수\r\n// function drinkCoffee() {\r\n//     console.log('커피를 마신다.')\r\n// }\r\n\r\n// // orderCoffee 함수를 호출하고 콜백 함수를 전달\r\n// // 콜백 함수는 orderCoffee 함수에서 커피가 만들어진 후에 실행된다.\r\n// orderCoffee('아메리카노', drinkCoffee)\r\n\r\n//promise\r\nconst coffeeOrder = new Promise((resolve,reject) => {\r\n    console.log('커피 제조 중......')\r\n    setTimeout(() => {\r\n        if(Math.random() > 0.5){\r\n            resolve('아메리카노')\r\n        }else{\r\n            reject('sold out')\r\n        }\r\n    }, 3000)\r\n})\r\n\r\ncoffeeOrder\r\n    //resolve 함수가 호출되면 then 메소드 실행\r\n    .then((item) => {\r\n        console.log(`${item}가 만들어졌습니다.`)\r\n    })\r\n    //reject 함수가 호출되면 catch 메소드 실행\r\n    .catch((error) => {\r\n        console.error(error)\r\n    })"],"names":[],"version":3,"file":"index.79e0fb77.js.map","sourceRoot":"/__parcel_source_root/"}